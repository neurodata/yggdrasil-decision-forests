###############################################################################
# Ariel MIGHT Presets - Intel Compiler icx only!
###############################################################################

# Base Intel toolchain, no debug, optimize for speed – the new default.
build:intel_base --cxxopt=-std=c++17
build:intel_base --cxxopt=-O2 --linkopt=-O2
# Comment-out if you prefer not to pin to host μarch
# build:intel_base --cxxopt=-xHost


# DEBUGGING  -------------------------------------------------
# Breakpoints don't seem to get hit without this!
# Can't seem to add to bazel dbg using build:dbg!! Define separate config!
build:intel_dbg --config=intel_base
build:intel_dbg --strip=never          # keep symbols, don’t fiddle with fission
build:intel_dbg --cxxopt=-g --linkopt=-g
build:intel_dbg --cxxopt=-O0 --linkopt=-O0


# -------------------------------------------------
# 2. VTune profiling (-O2 + DWARF symbols)
#  USE: bazel build -c opt --config=intel_profiler //foo:bar
build:intel_profiler --config=intel_base
build:intel_profiler --strip=never   # keep symbols
build:intel_profiler --cxxopt=-g --linkopt=-g
# Make sure split-DWARF is off – VTune hates .dwo/.dwp
build:intel_profiler --features=-fission
build:intel_profiler --cxxopt=-gno-split-dwarf


# Prints out timings for each function. Only use with run_chrono_xps.py
build:chrono_profile --cxxopt="-DCHRONO_MEASUREMENTS_LOG_LEVEL_FLAG=2"
build:fixed_1000_projections --cxxopt="-DHARD_CODE_1000_PROJECTIONS_FLAG=true"


###############################################################################
# Sensible project-wide defaults
###############################################################################

# Use Intel toolchain unless caller overrides it.
build --config=intel_base

# Nice coloured diagnostics on GCC/Clang too.
build:linux --copt=-fdiagnostics-color=always
build --color=yes




# Bazel configuration for Yggdrasil Decision Forests
#
# OPTIONS
#
# Linux
#
#   linux_cpp17: Linux build. Uses C++17.
#
# Linux options:
#
#   linux_avx2: AVX2.
#
# Windows
#
#  On Windows, uncomment the output_user_root option to avoid long path issues.
#
#   windows_cpp17: Windows build. Uses C++17.
#
# Windows options:
#
#   windows_avx2: AVX2.
#
# TensorFlow Defines:
#
#   use_tensorflow_io=1: Uses tensorflow for IO operations. Otherwise, use the
#     c++ Standard Library <filesystem>. Note: <filesystem> does not exist in
#     cpp<=14 and it had some issue with gcc<=8. Required to consume dataset
#     encoded as TFRecord of TF.Examples.
#   tensorflow_with_header_lib=1: Uses tensorflow header only library. Useful to
#     use tensorflow dynamic linking. Otherwise, links tensorflow statically (if
#     tensorflow is used).


build --incompatible_enable_cc_toolchain_resolution

# Avoid long path issues on Windows
# startup --output_user_root=C:/tmpbld

# Flags to compile with or without recent version of Bazel.

# Required for bazel <=4, fails with bazel >= 5.
# common --incompatible_restrict_string_escapes=false

build -c opt
build --announce_rc
build --noincompatible_strict_action_env

# Enable after adding python headers to protobuf.
build --define=use_fast_cpp_protos=true
build --define=allow_oversize_protos=true
build --define=grpc_no_ares=true

# Nice print
build:linux --copt=-fdiagnostics-color=always
build --color=yes

# Disable dependencies to Tensorflow.
build --define=use_ydf_tensorflow_proto=1

# Suppress C++ compiler warnings.
build:linux --copt=-w
build:linux --host_copt=-w
build:macos --copt=-w
build:windows --copt=/W0
build:wasm --copt=-w
build:wasm --host_copt=-w

# Build mode.
build:linux_cpp17 --cxxopt=-std=c++17
build:linux_cpp17 --host_cxxopt=-std=c++17
build:linux_cpp17 --config=linux

build:macos --cxxopt=-std=c++17
build:macos --host_cxxopt=-std=c++17

build:windows_cpp17 --cxxopt=/std:c++17
build:windows_cpp17 --host_cxxopt=/std:c++17
build:windows_cpp17 --config=windows

build:windows_cpp20 --cxxopt=/std:c++20
build:windows_cpp20 --host_cxxopt=/std:c++20
build:windows_cpp20 --config=windows

# Instruction set optimizations
build:linux_avx2 --copt=-mavx2
build:windows_avx2 --copt=/arch:AVX2

# Misc build options we need for windows.
build:windows --copt=/D_USE_MATH_DEFINES
build:windows --host_copt=/D_USE_MATH_DEFINES
build:windows --copt=-DWIN32_LEAN_AND_MEAN
build:windows --host_copt=-DWIN32_LEAN_AND_MEAN
build:windows --copt=-DNOGDI
build:windows --host_copt=-DNOGDI
build:windows --linkopt=/NDEBUG
build:windows --host_linkopt=/NDEBUG
build:windows --linkopt=/OPT:REF
build:windows --host_linkopt=/OPT:REF
build:windows --linkopt=/OPT:ICF
build:windows --host_linkopt=/OPT:ICF
build:windows --experimental_strict_action_env=true
build:windows --copt=/Zc:preprocessor
build:windows --host_copt=/Zc:preprocessor
build:windows --materialize_param_files
build:windows --features=compiler_param_file
build:windows --verbose_failures
build:windows --copt=/Oi
build:windows --host_copt=/Oi
build:windows --copt=/GL
build:windows --host_copt=/GL

# Wasm
# build:wasm --crosstool_top=@emsdk//emscripten_toolchain:everything
build:wasm --cpu=wasm
# build:wasm --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
build:wasm --copt="-Wno-deprecated-non-prototype"
build:wasm --copt="-Wno-unused-value"
build:wasm --copt="-Wno-unused-function"
build:wasm --copt="-Wno-deprecated-declarations"
build:wasm --copt="-Wno-unused-lambda-capture"
build:wasm --spawn_strategy=local
build:wasm --cxxopt=-std=c++17
build:wasm --host_cxxopt=-std=c++17
build:wasm --host_cxxopt="-fno-exceptions"

# Optional. Just to make it compatible with dynamic linking and TensorFlow.
# build --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
# build --host_cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"
